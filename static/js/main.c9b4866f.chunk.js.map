{"version":3,"sources":["components/card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","onSearchChange","event","setState","target","value","state","fetch","then","response","json","users","this","filteredRobots","filter","toLowerCase","includes","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"sOAgBeA,EAdF,SAAC,GAAyB,IAAxBC,EAAuB,EAAvBA,KAAOC,EAAgB,EAAhBA,MAAQC,EAAQ,EAARA,GAE7B,OAEC,yBAAKC,UAAU,uDACd,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,cACrB,6BACC,4BAAKF,GACL,2BAAIC,MCWOK,EAlBE,SAAC,GAAa,IAAZC,EAAW,EAAXA,OAElB,OACE,6BAEQA,EAAOC,KAAI,SAACC,EAAKC,GAC1B,OACI,kBAAC,EAAD,CACHC,IAAKD,EACLR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,aCELW,EAdG,SAAC,GAA6B,EAA5BC,YAA6B,IAAjBC,EAAgB,EAAhBA,aAC/B,OACG,yBAAKX,UAAW,OAClB,2BACAA,UAAU,mCACVY,KAAK,SACLC,YAAc,gBACdC,SAAUH,MCEGI,EATD,SAACC,GAEd,OACC,yBAAKC,MAAO,CAACC,UAAW,SAASC,OAAQ,kBAAmBC,OAAQ,UACjEJ,EAAMK,WC8CIC,G,wDA3CZ,aAAc,IAAD,8BACZ,gBAcHC,eAAe,SAACC,GACd,EAAKC,SAAS,CAACf,YAAYc,EAAME,OAAOC,SAdtC,EAAKC,MAAM,CACVxB,OAAQ,GACTM,YAAa,IAJF,E,gEAQI,IAAD,OAClBmB,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UAEzBF,MAAK,SAAAG,GAAK,OAAE,EAAKR,SAAS,CAACrB,OAAO6B,S,+BAOvB,IAAD,EACqBC,KAAKN,MAA1BxB,EADA,EACAA,OAAQM,EADR,EACQA,YACVyB,EAAgB/B,EAAOgC,QAAO,SAAAhC,GACrC,OAAOA,EAAOP,KAAKwC,cAAcC,SAAS5B,EAAY2B,kBAEvD,OAA+B,IAA3BH,KAAKN,MAAMxB,OAAOmC,OACd,uCAGN,yBAAKvC,UAAU,MACjB,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWW,aAAcuB,KAAKX,iBAE9B,kBAAC,EAAD,KAEI,kBAAC,EAAD,CAAUnB,OAAS+B,U,GAnCPK,cCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OAAO,kBAAC,EAAD,MAAOC,SAASC,eAAe,SD2HzC,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.c9b4866f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name , email , id}) => {\r\n   \t\r\n\treturn(\r\n\r\n\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t <img alt='robots' src={`https://robohash.org/${id}?200*200`} />\r\n\t\t <div>\r\n\t\t \t<h2>{name}</h2>\r\n\t\t \t<p>{email}</p>\r\n\t\t </div>\r\n\t\t</div> \t\r\n\t\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './card';\r\n\r\nconst  CardList =({robots}) =>{\r\n \r\n\treturn(\r\n\t  <div>\r\n          {\r\n          \trobots.map((user,i)=>{\r\n\t\treturn( \r\n\t\t    <Card \r\n\t\t\tkey={i} \r\n\t\t\tid={robots[i].id} \r\n\t\t\tname={robots[i].name} \r\n\t\t\temail={robots[i].email}/>\r\n\t\t\t);\r\n\t}) \r\n          }\r\n       </div>\r\n\t\t);\r\n}\r\nexport default CardList;","import React from 'react';\r\n\r\nconst  SearchBox =({searchfield,searchChange})=>{\r\n\treturn(\r\n\t   <div className= 'pa2'>\t\t\r\n\t\t<input\r\n\t\tclassName='pa3 ba b--green bg-lightest-blue' \r\n\t\ttype='search' \r\n\t\tplaceholder = 'search robots'\r\n\t\tonChange={searchChange}\r\n\t\t />\r\n\t\t\r\n\t\t</div> \r\n\t\t);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll =(props)=>{\r\n\r\n\treturn (\r\n\t\t<div style={{overflowY: 'scroll',border: '5px solid black', height: '500px'}}>\r\n\t\t  {props.children}\r\n\t\t</div> \r\n\t\t)\r\n};\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox'\r\nimport Scroll from '../components/Scroll';\r\n\r\nimport './App.css';\r\n\r\n\r\nclass App extends Component{\r\n   constructor(){\r\n   \tsuper()\r\n   \t this.state={\r\n   \t \trobots: [],\r\n\t    searchfield: ''\r\n\r\n   \t }\r\n   }\r\ncomponentDidMount(){\r\n\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t.then(response=> response.json())\r\n\t\r\n\t.then(users=>this.setState({robots:users}));\r\n\t \r\n}\r\n onSearchChange=(event)=>{\r\n   this.setState({searchfield:event.target.value})\r\n \t\r\n \t}\r\n   render() {\r\n   \tconst { robots, searchfield}=this.state;\r\n   \tconst filteredRobots= robots.filter(robots =>{\r\n \t\treturn robots.name.toLowerCase().includes(searchfield.toLowerCase())\r\n \t})\r\n \tif (this.state.robots.length===0){\r\n \t\treturn <h1>Loading</h1>\r\n \t} else {\r\n   \t return (\r\n\t   <div className='tc'>\t\r\n\t\t<h1 className='f1'>RoboFriends</h1>\r\n\t\t<SearchBox searchChange={this.onSearchChange}\r\n\t\t/>\r\n\t\t<Scroll>\r\n\t\t \r\n\t\t    <CardList robots= {filteredRobots}/>\r\n\t\t\r\n\t\t</Scroll>   \r\n\t   </div>\t\r\n\t\t);\r\n   }\r\n }\r\n\t\r\n}\r\nexport default App;\r\n\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nimport App from './containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\n\r\nReactDOM.render(<App/>,document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}